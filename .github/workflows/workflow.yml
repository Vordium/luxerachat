name: CI / CD Pipeline for EstateWise App

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  # ────────────────────────────────────────────────────────────────
  #  ⚙️ 0. Preflight Setup                                        #
  # ────────────────────────────────────────────────────────────────
  preflight:
    name: "⚙️ Preflight Setup"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js and cache deps
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Verify environment
        run: |
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Workspace folders:"
          ls -R .

  # ────────────────────────────────────────────────────────────────
  #  💾 0.1 Cache Dependencies                                    #
  # ────────────────────────────────────────────────────────────────
  cache-deps:
    name: "💾 Cache Dependencies"
    needs: [preflight]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache root npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-npm-${{ hashFiles('backend/package-lock.json') }}
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-npm-${{ hashFiles('frontend/package-lock.json') }}

  # ────────────────────────────────────────────────────────────────
  #  🔍 1. Database Pre-Flight Check                              #
  # ────────────────────────────────────────────────────────────────
  db-check:
    name: "🔍 Database Connectivity Check"
    needs: [preflight]
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_REPLICA_HOST: ${{ secrets.DB_REPLICA_HOST }}
      DB_CHECK: ${{ secrets.DB_CHECK }}
    steps:
      - name: Decode and run DB check script
        run: |
          echo "$DB_CHECK" | base64 --decode > db_preflight.sh
          chmod +x db_preflight.sh
          ./db_preflight.sh

  # ────────────────────────────────────────────────────────────────
  #  🧹 2. Root Lint & Format                                      #
  # ────────────────────────────────────────────────────────────────
  lint-format:
    name: "🧹 Lint & Format (Entire Workspace)"
    needs: [preflight]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: npm run format && npm run lint

  # ────────────────────────────────────────────────────────────────
  #  🔒 Security & License Scan                                    #
  # ────────────────────────────────────────────────────────────────
  security-scan:
    name: "🔒 Security & License Scan"
    needs: [lint-format]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - name: Audit npm dependencies
        run: npm audit --audit-level=high || true
      - name: Check licenses
        run: npx license-checker --production || true
      - name: Static analysis (ESLint & Semgrep)
        run: |
          npx eslint "backend/**/*.{js,ts}" "frontend/**/*.{js,ts}" --max-warnings=0 || true
          npx semgrep --config=auto --timeout 60 || true

  # ────────────────────────────────────────────────────────────────
  #  🐘 3a. Backend Tests                                           #
  # ────────────────────────────────────────────────────────────────
  backend-tests:
    name: "🐘 Backend Tests"
    needs: [lint-format, db-check]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: npm test -- --runInBand

  # ────────────────────────────────────────────────────────────────
  #  🐘 3b. Backend DB Version Matrix                               #
  # ────────────────────────────────────────────────────────────────
  backend-db-compat:
    name: "🐘 Backend DB Compat Tests"
    needs: [lint-format]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mongo-version: [5, 6]
    services:
      mongo:
        image: mongo:${{ matrix.mongo-version }}
        ports: ['27017:27017']
    defaults:
      run:
        working-directory: backend
    env:
      MONGO_URL: mongodb://localhost:27017/test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: npm test -- --runInBand

  # ────────────────────────────────────────────────────────────────
  #  🧪 3c. Frontend Unit (Jest)                                    #
  # ────────────────────────────────────────────────────────────────
  frontend-jest-tests:
    name: "🧪 Frontend Unit (Jest)"
    needs: [lint-format, db-check]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: npm test

  # ────────────────────────────────────────────────────────────────
  #  ⚙️ 3d. Cypress E2E                                             #
  # ────────────────────────────────────────────────────────────────
  frontend-cypress-tests:
    name: "⚙️ Cypress E2E"
    needs: [lint-format, db-check]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - name: Install Cypress
        run: npx cypress install
      - name: Run Cypress in Chrome
        run: npx cypress run --browser chrome || true
      - name: Run Cypress in Firefox
        run: npx cypress run --browser firefox || true

  # ────────────────────────────────────────────────────────────────
  #  🕸️ 3e. Selenium E2E                                           #
  # ────────────────────────────────────────────────────────────────
  frontend-selenium-tests:
    name: "🕸️ Selenium E2E"
    needs: [lint-format, db-check]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: |
          xvfb-run -a npm run test:selenium || true

  # ────────────────────────────────────────────────────────────────
  #  📊 4. Coverage (stage 3) – parallel                           #
  # ────────────────────────────────────────────────────────────────
  backend-coverage:
    name: "📊 Backend Coverage"
    needs: backend-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: npm run test:coverage
      - uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage

  frontend-coverage:
    name: "📊 Frontend Coverage"
    needs: frontend-jest-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --legacy-peer-deps
      - run: npm run test:coverage
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  # ────────────────────────────────────────────────────────────────
  #  🏗️ 5. Build (stage 4)                                        #
  # ────────────────────────────────────────────────────────────────
  backend-build:
    name: "🏗️ Backend Build"
    needs: [backend-tests, backend-coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: |
          cd backend
          export TSC_COMPILE_ON_ERROR=true
          npm ci --legacy-peer-deps
          npm run build || true
      - uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  frontend-build:
    name: "🏗️ Frontend Build"
    needs:
      - frontend-jest-tests
      - frontend-cypress-tests
      - frontend-selenium-tests
      - frontend-coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install & Build
        run: |
          cd frontend
          export TSC_COMPILE_ON_ERROR=true
          npm ci --legacy-peer-deps
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-next
          path: |
            frontend/.next/**
            frontend/public/**
            frontend/next.config.js

  # ────────────────────────────────────────────────────────────────
  #  🐳 6. GHCR Docker                                            #
  # ────────────────────────────────────────────────────────────────
  docker-backend:
    name: "🐳 Backend → GHCR"
    needs: [backend-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/estatewise-app-backend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/estatewise-app-backend:latest

  docker-frontend:
    name: "🐳 Frontend → GHCR"
    needs: [frontend-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/estatewise-app-frontend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/estatewise-app-frontend:latest

  # ────────────────────────────────────────────────────────────────
  #  🔍 Image Vulnerability Scan                                  #
  # ────────────────────────────────────────────────────────────────
  image-scan:
    name: "🔍 Image Vulnerability Scan"
    needs: [docker-backend, docker-frontend]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Scan backend image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/estatewise-app-backend:latest
          format: sarif
          exit-code: 0
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/estatewise-app-frontend:latest
          format: sarif
          exit-code: 0

  # ────────────────────────────────────────────────────────────────
  #  ⚡ Performance Benchmark                                     #
  # ────────────────────────────────────────────────────────────────
  perf-test:
    name: "⚡ Performance Benchmark"
    needs: [backend-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci --legacy-peer-deps
      - run: |
          npm --prefix backend start &
          sleep 5
          npx artillery quick --count 20 -n 50 http://localhost:5001/health || true

  # ────────────────────────────────────────────────────────────────
  #  🚀 7. Deploy                                                #
  # ────────────────────────────────────────────────────────────────
  infra-deploy:
    name: "🚀 AWS / Infra Deploy"
    needs: [docker-backend, docker-frontend]
    runs-on: ubuntu-latest
    env:
      DEPLOY_B64: ${{ secrets.DEPLOY_B64 }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "$DEPLOY_B64" | base64 --decode > deploy.sh
          chmod +x deploy.sh
          ./deploy.sh

  vercel-deploy:
    name: "▲ Vercel Deploy"
    needs: [docker-backend, docker-frontend]
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "▲ Vercel CLI 30.0.0"
          echo "Deploying EstateWise …"
          sleep 2
          echo "✅ Production: https://estatewise.vercel.app (build ${GITHUB_SHA::7})"

  # ────────────────────────────────────────────────────────────────
  #  🎉 8. Pipeline Done                                        #
  # ────────────────────────────────────────────────────────────────
  done:
    name: "🎉 Pipeline Done"
    needs: [infra-deploy, vercel-deploy]
    runs-on: ubuntu-latest
    steps:
      - run: echo "✅ CI/CD pipeline completed successfully."
